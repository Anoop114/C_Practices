/----------------------------------------------
/--------------LESSON NOTES-------------------- 
/----------------------------------------------

* MACRO 
 - fonksiyon çaðrýlarýndan kaynaklanan maliyetden kaçýnmak
 - fonksiyon çaðrýsý olduðu yerde derleyici sadece belirtilen kodu yazar
 - burada bir return value tanýmý yoktur

/----------------------------------------------
/----------------------------------------------

#define _USE_MATH_DEFINES
#include <math.h>
#include <limits.h>
#include <stdio.h>


#ifdef _USE_MATH_DEFINES // define edildiði için by bloða girilir. 
#define SIZE 100
#define MAX 500
#endif // _USE_MATH_DEFINES


int main() {

	int sqrtNumberWithMacro = M_SQRT2;
	printf("sqrtNumberWithMacro : %d\n", sqrtNumberWithMacro);

	int sqrtNumberWithFunction = sqrt(2);
	printf("sqrtNumberWithFunction : %d\n", sqrtNumberWithFunction);

	int number = INT_MAX;
	printf("number : %d\n", number);

	return 0;
}

/----------------------------------------------
/----------------------------------------------

* Functional Macro:
 - fonsiyona giriþ ve fonksiyondan çýkýþ kodu olmayacaðý için daha hýzlý çalýþmasý beklenmektedir. 
 - kodu küçük ve çok sýk çaðrýlan fonksiyonlar için tercih edilmelidir. 
 - yazma kolaylýðýndan dolayý da tercih edilmektedir. 
 - bit elemanlarýnýn kullanýmý sýrasýnda functional macro kullanýmý yaygýndýr. 
 - bu macro yapýsýnýn kullanýcýsý 
 - güvenlik açýsýndan açýðý vardýr; ancak kullanýmýndan da vazgeçilemez. 

#define max(a,b) ((a) > (b) ? (a):(b))
#include <stdio.h>

int main() {

	int x = 34, y = 67;
	int ival = max(x, y);
	printf("ival : %d\n", ival);

	return 0;
}

/----------------------------------------------
/----------------------------------------------