/----------------------------------------------
/--------------LESSON NOTES-------------------- 
/----------------------------------------------

* #undef preprocessor command:
 - #define makro komutunun tersi
 - #undef MAX ile MAX makrosunun geçerliliği ortadan kalkar
 - Önceden var olmayan bir makronun #undef edilmesi undefined behaviour değildir
 - #define edilen her makronun #undef edilmesi gerekir şeklinde bir kural yoktur. 

#define sum_square(x,y) ((x*x)+(y*y))
//...
#undef sum_square

/----------------------------------------------
/----------------------------------------------

* Bir makronun farklı iki şekilde define edilmesi --> undefined behaviour
  - Farklı başlık dosyalarının include edilmesi ile 
  - İhtiyaç dahilinde aynı makronun temsil ettiği değerin değişmesi gerekebilir. Ancak bu durumda koruma kodu yazılmalıdır. 


#define MAX 1000
//...
#define MAX 5000 //warning C4005 : 'MAX' : macro redefinition

/----------------------------------------------

#define MAX 1000
//...
#undef MAX       // koruma kodu 
#define MAX 5000

/----------------------------------------------

void func() {
 
#define SIZE 1000 // Not have a block scope

}
/----------------------------------------------
void func() {

#define SIZE 1000 // Have a block scope
//...
#undef SIZE

}
/----------------------------------------------

#define MAX  // Bir sonraki kod bloğuna girilmesini sağlar!!

#ifdef MAX
	typedef int Word;
#endif

#undef MAX    // Bir sonraki kod bloğuna girilmesini engeller!!

#ifdef MAX
	typedef unsigned char Byte;
#endif

* Başlık dosyalarının artması çalıştırılabilir kod byüklüğünü arttırmaz

/----------------------------------------------
/---------------------------------------------- 

* #line, #error, #pragma preprocessor commands 
 - #error --> kodun bilerek isteyerek önişlemci aşamasında sonlandırılması
 - #pragma


#error this project should not been compiled!!!

/----------------------------------------------
// c derleyicisi ile derlenmek istendiğinde bu blok içine girecektir:
// programcı sadece cpp derleyicisi ile derlemek istediğinde 

#ifndef __cplusplus 
#error this project should not been compiled!!!
#endif

/----------------------------------------------
/---------------------------------------------- 

* Predefined symbolic constants (predefined macro)
 - önceden tanımlanmış makro sabitleri:  __cplusplus 
 - diğer makrolar ile çakışma riskini ortadan kaldırmak için __ ile başlar ve biter. 
 __LINE__  : assert makrosu içinde de tanımlıdır. 
 __FILE__
 __DATE__
 __TIME__
 __STDC__
 __func__

/----------------------------------------------

#include <stdio.h>

int main() {
	
	printf("The row of source code :  %d\n", __LINE__); //  : 5
	printf("The row of source code :  %d\n", __LINE__); //  : 6
}

/----------------------------------------------

#include <stdio.h>
#include <stdlib.h>

#define DEBUG

void func(int x) {
#ifdef DEBUG 
	if (x == 0) {
		printf("Error error...");
		abort();
	}
#endif
}

int main() {
	func(0); // The program was aborted !!!
}

/----------------------------------------------

* You can use assert functional macro (from <assert.h> library) instead of previous code sample
 - assert(x != 0); --> parantez içinde doğru olması gereken ifade yazılmalı!

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

void func(int x) {
	assert(x != 0);
}

int main() {
	func(0);
}

/----------------------------------------------
* assert functional macro definition in standard lib. 

#ifdef NDEBUG

    #define assert(expression) ((void)0)

#else

    _ACRTIMP void __cdecl _wassert(
        _In_z_ wchar_t const* _Message,
        _In_z_ wchar_t const* _File,
        _In_   unsigned       _Line
        );

    #define assert(expression) (void)(                                                       \
            (!!(expression)) ||                                                              \
            (_wassert(_CRT_WIDE(#expression), _CRT_WIDE(__FILE__), (unsigned)(__LINE__)), 0) \
        )

#endif

/----------------------------------------------

* #define NDEBUG ile debug süreci sonlandığında assert makrolarının elle silinmesine gerek kalmadan derleme aşamasında koddan çıkarılması sağlanır. 
 - #define NDEBUG --> #include <assert.h> öncesinde eklenmesi gerekmektedir. 
 - Bu sayede boş deyim dönmesi sağlanacaktır 
   --> #define assert(expression) ((void)0)

#define NDEBUG
#include <assert.h>

void func(int x) {
	assert(x != 0);
}

/----------------------------------------------

* __DATE__ , __TIME__, __FILE makroları
     - __TIME__ otomatik olarak derleme zamanına göre değişir.
     - __DATE__ otomatik olarak derleme zamanına göre değişir.

#include <stdio.h>

int main() {

	printf("SOURCE CODE : %s\n", __FILE__);
	//SOURCE CODE : C:\Users\user\Desktop\GitHub_Repo\C_Practices\16_Lesson\main.c

	printf("Compile date : %s\n", __DATE__); 
	// Compile time : Sep 13 2020

	printf("Compile time : %s\n", __TIME__);
	// Compile time : 10 : 08 : 26
}
/----------------------------------------------
* __func__ makrosu:

#include <stdio.h>

void foo(void) {
	printf("The row %d of %s function in %s file \n", __LINE__, __func__, __FILE__);

}
int main() {
	foo();
}

/----------------------------------------------

* __STDC__ : 
    - c ile derlenmesi istenen kod blokları için koşul olarak kullanılır. 
    - __cpluscplus ifadesi ise aynı makro yapısının cpp tarafındaki hali 

#ifdef __STDC__     // Defined for c compiler
#error C Compiler
#endif

#ifdef __cpluscplus // Defined for cpp compiler
#error CPP Compiler
#endif

/----------------------------------------------
* #pragma : 
    - eğer bir derleyici önişlemci programa ilave işler yaptırmak istiyorsa bu komut kullanılmaktadır.
    - hangi amaçla kullanılacağı standartlara bağlı değildir. 
    - portability sorunu ortaya çıkabilir. Çünkü derleyiciye specifik pragma komutları yazılmaktadır. 
    - #pragma once : multiple inclusion guard
    - #pragma warning(disable:4552) : to disable a warning

#include <stdio.h>
#pragma warning(disable:4552)

int main() {

	int x = 10;
	x + 5;
	// warning C4552: '+': result of expression not used
}

/----------------------------------------------
/----------------------------------------------

* nutility.h:
--------------------
#ifndef NUTILITY_H
#define NUTILITY_H

//isleap
#define isleap(y)  ((y)%4 == 0 && ((y)%100 != 0 || (y)%400 ==0))

int isprime(int);
int ndigit(int);
void dline(void);
void sleep(double);
int day_of_week(int, int, int);

#endif

nutility.c:
------------------------
#include"nutility.h"
#include <stdio.h>
#include <time.h>


int isprime(int x){
	return 0;
}
int ndigit(int y){
	return 0;
}

void dline(void) {
	printf("\n-----------------------------------------------------\n");
}

void sleep(double sec) {

	clock_t start = clock();

	while ((double)(clock() - start) / CLOCKS_PER_SEC < sec)
		; // null statement
}

// The Tomohiko Sakamoto Algorithm 

int day_of_week(int day, int month, int year)
{
	// array with leading number of days values 
	// look-up table --> const int[]
	static const int t[] = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };

	// if month is less than 3 reduce year by 1 
	if (month < 3)
		year -= 1;

	return ((year + year / 4 - year / 100 + year / 400 + t[month - 1] + day) % 7);
}

main.c
------------------------
#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"

int main() {

	int day = 13, month = 7, year = 2017;
	int n;

	n = day_of_week(day, month, year);
	return 0;
}

/----------------------------------------------
/----------------------------------------------
* false positive code : 
	 - int x = 45.7; possible loss of data warning 
	 - bilerek yazılan bir durum ise uyarı mesajı çıkmasını engelleyecek kodlar yazılmalıdır. 
	 - 0 error - 0 warning olana kadar kod kontrol edilmelidir. 
	 - "treat warnings as errors" ayarı ile warning --> error olarak dönecek şekilde ayarlanmalıdır. (Properties --> General --> C/C++)

/----------------------------------------------
/----------------------------------------------

* Kod yazım kuralları:
	- Kod test edilmeli
	- 0 error - 0 warning ile commit edilmeli
	- false-positive durumlarda compiler uyarı vermemeli
	- belli bir kod standardına göre yazılmalı
	- +=, %= gibi operatorler kullanılmalı
	- int x = 10; yazılmalı --> yerine
	  int x; 
	  x=10;  
	- değişken bildirimleri ayrı ayrı yapılmalıdır. 
	  int ival, cnt=0, *ptr=&ival; yerine -->
	  int ival;
	  int cnt=0;
	  int *ptr= &ival; 
	- for() için sadece o blok altında kullanılacak bir değişken 
	  for(int i=0;;) olarak ifade edilmeli
	- döngü değişkenleri i,j,k şeklinde isimlendirilebilir. 
	- cnt++ yerine --> ++cnt yazılmalı
	- scope genişledikçe isimler özelleştirilmeli 
	- global isim alanında çok genel isimler seçilmemeli 
	  ör: int counter; yerine --> daha spesifik isimlendirme kullanılmalı

/----------------------------------------------
/----------------------------------------------

## SWITCH-CASE CONTROL STATEMENT :

- her switch-case --> if-else dönüştürülebilir. Ancak tersi her zaman doğru değil!
- daha iyi compiler optimization için tercih edilebilir.
- switch() blok içindeki ifade tamsayı türü olmak zorundadır (double, float vb. olamaz).
- case label ise constant tamsayı değeri olmak zorundadır !!! Değişken veya real sayılardan biri olamaz.  
- her bir case label unique olmalıdır. 
- break; kullanımı, case geçişleri arasında yaygındır (break; deyiminin özellikle kullanılmak zorunda olmadığı diller de mevcut!!!)
- case label sonrasında mutlaka bir ifade bulunmalıdır. 
- default case, switch-case ifadesinin farklı yerlerde bulunması anlam açısından fark yaratmaz. Ancak okunabilirlik açısından sonda bulunması tercih edilir. 
- The usage of case labels: 
  - case 'A':        --> OK
  - case "Jane":     --> NOT OK, the case label shall not be string literal 
  - case 12.5:       --> NOT OK, the case label shall be integer value
  - case MAX:        --> OK or NOT OK, it depends on MAX value
  - case (MIN+MAX)/2:--> OK or NOT OK, it depends on MAX, MIN values
  - case -5:	     --> OK, the case label can be positive or negative integer values 
  - case 0X23:       --> OK, the case label can be defined in a different number systems

/----------------------------------------------
/----------------------------------------------

```cpp
switch (x) {
case 5,4,3,2,1 :printf("hello");        // syntax error
}

switch (x) {
case 5; case 4; case 3:printf("hello"); // not syntax error
}
```

/----------------------------------------------
/----------------------------------------------

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {
	int x = 3;
	
	switch (x) {
	case 4 :
	case 3 :
	case 2 : printf("hello"); // syntax error
	case 1 :
	}
}
```

/----------------------------------------------
/----------------------------------------------

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(){
	int x; 
	switch (x)
		case 1 :printf("hello"); 
		// This style can be used, but not preferable!
		// Instead of using this style, use if-else block! 
}
```

/----------------------------------------------
/----------------------------------------------

* Example: Using if-else block instead of switch-case block 

```cpp
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

int main() {

	int day_order;
	
	printf("1 : Monday    \n");
	printf("2 : Tuesday   \n");
	printf("3 : Wednesday \n");
	printf("4 : Thursay   \n");
	printf("5 : Friday    \n");
	printf("6 : Saturday  \n");
	printf("7 : Sunday    \n\n");
	printf("What is the order of the selected day in a week ?: ");
	scanf("%d", &day_order);

	if (day_order == 1) 
		printf("Monday\n");
	else if (day_order == 2) 
		printf("Tuesday\n");
	else if (day_order == 3) 
		printf("Wednesday\n");
	else if (day_order == 4) 
		printf("Thursay\n");
	else if (day_order == 5)
		printf("Friday\n");
	else if (day_order == 6)
		printf("Saturday\n");
	else if (day_order == 7)
		printf("Sunday\n");
}
```

/----------------------------------------------
/----------------------------------------------

* Example: Using switch-case block instead of if-else block 

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int main() {

	int day_order;
	
	printf("1 : Monday    \n");
	printf("2 : Tuesday   \n");
	printf("3 : Wednesday \n");
	printf("4 : Thursay   \n");
	printf("5 : Friday    \n");
	printf("6 : Saturday  \n");
	printf("7 : Sunday    \n\n");
	printf("What is the order of the selected day in a week ?: ");
	
	scanf("%d", &day_order);

	switch (day_order) {
	case 1:printf("Monday    \n"); break; 
	case 2:printf("Tuesday   \n"); break;
	case 3:printf("Wednesday \n"); break;
	case 4:printf("Thursay   \n"); break;
	case 5:printf("Friday    \n"); break;
	case 6:printf("Saturday  \n"); break;
	case 7:printf("Sunday    \n"); break;
	default:printf("Invalid Day Selection!!!\n"); break; 
	}
	
	return 0;
}
```

/----------------------------------------------
/----------------------------------------------

- Example: Printing "hello" without using semi-colon (Interview Question) 

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdlib.h>

int main() {
	switch (printf("hello")) {}
}
```

/----------------------------------------------

- Example: Printing "hello" by using switch-case block (another solution type for the previous example)

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {
	int x = 5;
	switch (x) {
	case 5 :printf("hello");
	}
}
```

/----------------------------------------------
/----------------------------------------------

- Example: Desingning the following cases with the same results  
  - case 12, case 1, case 2  --> printing "Winter"
  - case 3, case 4, case 5   --> printing "Spring"
  - case 6, case 7, case 8   --> printing "Summer"
  - case 9, case 10, case 12 --> printing "Autumn"

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {
	int month_order = 3;

	switch (month_order) {
	case 12:
	case 1:
	case 2:printf("Winter \n"); break;
	case 3:
	case 4:
	case 5:printf("Spring \n"); break;
	case 6:
	case 7:
	case 8:printf("Summer \n"); break;
	case 9:
	case 10:
	case 11:printf("Autumn \n"); break;
	}
}
```

/----------------------------------------------
/----------------------------------------------

* Example: Printing the season names with if-else and switch-case blocks 

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void print_season_switch(int month) {
	
	switch (month) {
	case 12:
	case 1:
	case 2:printf("Winter \n"); break;
	case 3:
	case 4:
	case 5:printf("Spring \n"); break;
	case 6:
	case 7:
	case 8:printf("Summer \n"); break;
	case 9:
	case 10:
	case 11:printf("Autumn \n"); break;
	default:printf("Invalid Season Selection!!!\n"); break;
	}
}

void print_season_if(int month) {

	if(month == 12 || month == 1 || month == 2 )
		printf("Winter\n");
	else if(month == 3 || month == 4 || month == 5)
		printf("Spring\n");
	else if (month == 6 || month == 7 || month == 8)
		printf("Summer\n");
	else if (month == 9 || month == 10 || month == 11)
		printf("Autumn\n");
	else
		printf("Invalid Season Selection!!!\n");

}

int main() {

	int month = 0;
	
	printf("12,1,2  : Winter \n");
	printf("3,4,5   : Spring \n");
	printf("6,7,8   : Summer \n");
	printf("9,10,11 : Autumn \n\n");
	printf("What is the order of the selected month ? : ");
	
	scanf("%d", &month);

	print_season_switch(month);
	print_season_if(month);
}
```

/----------------------------------------------
/----------------------------------------------

- Example: Writing "fallthrough" comment in switch-case blocks 
  - While "fallthrough" comment is written, it means that the faulty case is realized consciously. 
  - Normally, static code analyser tools (SonarQube, etc.) return a warning message for this kind of cases which not having break statement. 

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {

	int x = 3;

	switch (x) {
	case 1: statement1;  // fallthrough
	case 2: statement2; break; 
	//...
	}
}
```

/----------------------------------------------
/----------------------------------------------

* Example: Using switch - case blocks with macros

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

// Macro Definitions
#define OFF       0 
#define ON        1
#define STAND_BY  2
#define HOLD      3

int main() {

	int state = 0;

	printf("0 : OFF State      \n");
	printf("1 : ON State       \n");
	printf("2 : STAND_BY State \n");
	printf("3 : HOLD State     \n\n");
	printf("What is the selected state ? (0/1/2/3): ");

	scanf("%d", &state);

	switch (state) {
	case OFF     : printf("OFF State"); break;
	case ON      : printf("ON State"); break;
	case STAND_BY: printf("STAND_BY State"); break;
	case HOLD    : printf("HOLD State"); break;
	default      : printf("Invalid State Selection"); break;
	}
}
```

/----------------------------------------------
/----------------------------------------------

* Example: Using switch - case blocks with enumeration (1)

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

// Enumeration Definitions --> Underlined Type: int
enum State {
	OFF,
	ON,
	STAND_BY,
	HOLD
};

int main() {

	enum State state = OFF;

	printf("0 : OFF State      \n");
	printf("1 : ON State       \n");
	printf("2 : STAND_BY State \n");
	printf("3 : HOLD State     \n\n");
	printf("What is the selected state ? (0/1/2/3): ");

	scanf("%d", &state);

	switch (state) {
	case OFF     : printf("OFF State"); break;
	case ON      : printf("ON State"); break;
	case STAND_BY: printf("STAND_BY State"); break;
	case HOLD    : printf("HOLD State"); break;
	default      : printf("Invalid State Selection"); break;
	}
}
```

/----------------------------------------------
/----------------------------------------------

- Example: Using switch - case blocks with enumeration (2)

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

enum Card {
	Club,
	Diamond,
	Heart,
	Spade
};

int main() {

	enum Card suit = Club;

	printf("0 : Club Card      \n");
	printf("1 : Diamond Card   \n");
	printf("2 : Heart Card	   \n");
	printf("3 : Spade Card     \n\n");
	printf("What is the selected card ? (0/1/2/3): ");

	scanf("%d", &suit);

	switch (suit) {
	case Club   : printf("Club Selected!!!"); break;
	case Diamond: printf("Diamond Selected!!!"); break;
	case Heart  : printf("Heart Selected!!!"); break;
	case Spade  : printf("Spade Selected!!!"); break;
	default     : printf("Invalid Card Selection!!!"); break;
	}
}
```

/----------------------------------------------
/----------------------------------------------

- Example: 
  - Printing the day of the selected date with functions including switch-case blocks
  - Considering the following specification: 
    - The suffix is : st --> 1st  June 2020, 21st June 2020, 31st June 2020
    - The suffix is : nd --> 2nd  August 2020, 22nd August 2020 
    - The suffix is : rd --> 3rd  September 2020, 23rd September 2020
    - The suffix is : th (the other days) --> 15th, 14th, 16th, 17th, 18th, 19th,... May 2020

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define SIZE 5

void print_date(int day, int month, int year) {

	printf("%02d", day); // 0 is the filling charachter here

	switch (day) {
	case 1:
	case 21:
	case 31: printf("st "); break;
	case 2:
	case 22: printf("nd "); break;
	case 3:
	case 23: printf("rd "); break;
	default: printf("th "); break;
	}

	switch (month) {
	case 1:  printf("January "); break;
	case 2:  printf("February "); break;
	case 3:  printf("March "); break;
	case 4:  printf("April "); break;
	case 5:	 printf("May "); break;
	case 6:  printf("June "); break;
	case 7:  printf("July "); break;
	case 8:  printf("August "); break;
	case 9:  printf("September "); break;
	case 10: printf("October "); break;
	case 11: printf("November "); break;
	case 12: printf("December "); break;
	default: printf("Invalid Month Selection !!!"); break;
	}

	printf("%d", year);
}

int main() {
	int day = 0;
	int month = 0;
	int year = 0;

	while (SIZE != 0) {
		printf("What is the date (day/month/year)? : ");
		scanf("%d%d%d", &day, &month, &year);

		print_date(day, month, year);
		putchar('\n');
	}
}
```

/----------------------------------------------
/----------------------------------------------

* Example: Printing the day of weeks with switch-case blocks and random number generators

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <conio.h>
#include <time.h>
#include <stdlib.h>

int main() {
	
	srand((unsigned)time(NULL));

	for (int i = 0; i < 20; ++i) {
		switch (rand() % 7 + 1){
		case 1: printf("Monday \n"); break;
		case 2: printf("Tuesday \n"); break;
		case 3: printf("Wednesday \n"); break;
		case 4: printf("Thursday \n"); break;
		case 5: printf("Friday \n"); break;
		case 6: printf("Saturday \n"); break;
		case 7: printf("Sunday \n"); break;
		}
		_getch();
	}
}
```

/----------------------------------------------
/----------------------------------------------

* Example: Finding the day of year with switch-case 

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

#define isleap(y)  ((y)%4 == 0 && ((y)%100 != 0 || (y)%400 ==0))
#define SIZE 5 

int is_leap_year(int year) {
	return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
}

int day_of_year(int day, int month, int year) {
	
	int sum = day;

	switch (month-1) {
	case 11: sum += 30; // fallthrough
	case 10: sum += 31; // fallthrough
	case 9: sum += 30;  // fallthrough
	case 8: sum += 31;  // fallthrough
	case 7: sum += 31;  // fallthrough
	case 6: sum += 30;  // fallthrough
	case 5: sum += 31;  // fallthrough
	case 4: sum += 30;  // fallthrough
	case 3: sum += 31;  // fallthrough
	case 2: sum += 28 + is_leap_year(year);  // fallthrough
	//case 2: sum += isleap(year) ? 28 : 29; // fallthrough
	case 1: sum += 31;  // fallthrough
	}

	return sum;
}

int main() {

	int day = 0;
	int month = 0;
	int year = 0;

	while (SIZE != 0) {
		printf("What is the date (day/month/year)? : ");
		scanf("%d%d%d", &day, &month, &year);
		
		int dayOfYear = day_of_year(day, month, year);
		printf("The day of year : %d", dayOfYear);
		
		putchar('\n');
	}
}
```

/----------------------------------------------
/----------------------------------------------

* Example: A pseudo code example with switch-case block 

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

#define OFF      0 
#define ON       1 
#define STAND_BY 2 
#define HOLD     3 

int is_remote_access() { return 1; }
void off_state(void) {}
void on_state(void) {}
void standby_state(void) {}
void hold_state(void) {}
void default_state(void) {}

int main() {

	switch (is_remote_access()) {
	case 0 : off_state(); break;
	case 1 : on_state(); break;
	case 2 : standby_state(); break;
	case 3 : hold_state(); break;
	default: default_state() ; break;
	}
}
```

/----------------------------------------------
/----------------------------------------------

* Example: Printig selected value with switch-case block

```cpp
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

#define SIZE 5 

typedef enum {
	COLOR_BLACK,
	COLOR_WHITE, 
	COLOR_PURPLE,
	COLOR_YELLOW,
	COLOR_GREEN
}Colors;

void print_color(Colors color) {

	switch (color) {
	case COLOR_BLACK  : printf("Black\n"); break;
	case COLOR_WHITE  : printf("White\n"); break;
	case COLOR_PURPLE : printf("Purple\n"); break;
	case COLOR_YELLOW : printf("Yellow\n"); break;
	case COLOR_GREEN  : printf("Green\n"); break;
	default: printf("Invalid Color Selection\n"); break;
	}
}

int main() {

	Colors color = COLOR_BLACK; 

	while (SIZE != 0) {

		printf("0 : Black   \n");
		printf("1 : White   \n");
		printf("2 : Purple  \n");
		printf("3 : Yellow  \n");
		printf("4 : Green   \n\n");
		printf("What is the selected card ? (0/1/2/3/4): ");

		scanf("%d", &color);
		print_color(color);
		putchar('\n');
	}
}
```

/----------------------------------------------
/----------------------------------------------
